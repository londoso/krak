AWSTemplateFormatVersion: 2010-09-09
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: Target VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: SubnetA

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: RouteTableA

  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable

  SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetA

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
      Tags:
        - Key: Name
          Value: SG Linux Instance
      VpcId: !Ref VPC

  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref LinuxInstance

  Profile:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 's3:*'
                Resource: '*'

  MyInstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles: 
        - 
          Ref: Profile

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for RDS
      Tags:
        - Key: Name
          Value: SG RDS
      VpcId: !Ref VPC

  DBSecurityGroupIG1:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: DBSecurityGroup    
    Properties:
      GroupId: !GetAtt DBSecurityGroup.GroupId
      FromPort: 5432
      IpProtocol: tcp
      ToPort: 5432
      SourceSecurityGroupId: !GetAtt InstanceSecurityGroup.GroupId
      Description: Enable DataBase access via port 5432 to EC2

  SubnetDB1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Name
          Value: SubnetDB1

  SubnetDB2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1b
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      Tags:
        - Key: Name
          Value: SubnetDB2

  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Managed DB subnet group.
      SubnetIds:
        - !Ref SubnetDB1
        - !Ref SubnetDB2

  IAMUser:
    Type: AWS::IAM::User

  IAMAcessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName:
        Ref: IAMUser

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: BucketOwnerFullControl
      
  IAMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: S3BucketPermissions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: S3BucketPermissions
          Effect: Allow
          Action:
          - s3:*
          Resource:
          - Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: S3Bucket
          - Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: S3Bucket
              - "/*"
      Users:
      - Ref: IAMUser

  MasterDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: Master
      DBInstanceIdentifier: MasterDB
      AllocatedStorage: 20
      DBInstanceClass: db.t2.micro
      Engine: postgres
      EngineVersion: 12
      MasterUsername: anderson
      MasterUserPassword: pasS123crak
      MultiAZ: false
      Tags:
        - Key: Name
          Value: Master Database
      VPCSecurityGroups: 
        - !Ref DBSecurityGroup
      DBSubnetGroupName: !Ref DatabaseSubnetGroup

  LinuxInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-047a51fa27710816e
      InstanceType: t3a.micro
      KeyName: krak
      SubnetId: !Ref SubnetA
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 5
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
              #!/bin/bash
              CONF="./confing.ini"
              echo "# Config DB Parameters" > "$CONF"
              cat <<EOT >> "$CONF"
              [postgresql]
              EOT
              echo "${MasterDNS}" >> $CONF
            - MasterDNS: !GetAtt MasterDB.Endpoint.Address
      Tags:
        - Key: Appplication
          Value:  Linux Server
        - Key: Owner
          Value:  Anderson Londo√±o Osorio
      IamInstanceProfile: !Ref MyInstanceProfile

  # DNSRecordSetMaster:
  #         Type: 20
  #         Properties:
  #           HostedZoneName: mydomain.com.
  #           Name: database-${self:custom.stage}.mydomain.com
  #           Type: CNAME
  #           TTL: '300'
  #           ResourceRecords:
  #             - !GetAtt RDSDatabase.Endpoint.Address
  #         DependsOn: RDSDatabase

Outputs:
  EndPointMaster:
    Description: RDS Master EndPoint.
    Value: !GetAtt MasterDB.Endpoint.Address
    Export:
      Name: RDS-Master